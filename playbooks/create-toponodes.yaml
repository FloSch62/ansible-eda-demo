---
- name: Provision demo NodeProfiles and TopoNodes via Nokia EDA transactions
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/nodeprofiles.yml
    - ../vars/toponodes.yml
    - ../vars/topolinks.yml
  pre_tasks:
    - name: Ensure NodeProfile specs contain required keys
      ansible.builtin.assert:
        that:
          - nodeprofiles.spine.name | length > 0
          - nodeprofiles.leaf.name | length > 0
          - nodeprofiles.spine.spec.nodeUser is defined
          - nodeprofiles.spine.spec.onboardingPassword is defined
          - nodeprofiles.spine.spec.onboardingUsername is defined
          - nodeprofiles.spine.spec.operatingSystem is defined
          - nodeprofiles.spine.spec.version is defined
          - nodeprofiles.spine.spec.yang is defined
          - nodeprofiles.leaf.spec.nodeUser is defined
          - nodeprofiles.leaf.spec.onboardingPassword is defined
          - nodeprofiles.leaf.spec.onboardingUsername is defined
          - nodeprofiles.leaf.spec.operatingSystem is defined
          - nodeprofiles.leaf.spec.version is defined
          - nodeprofiles.leaf.spec.yang is defined
        fail_msg: >-
          Populate nodeprofiles.yml with valid spec data (nodeUser, onboarding credentials, operatingSystem,
          version, and YANG bundle URL) before running the demo.

    - name: Ensure TopoLink inputs are present
      ansible.builtin.assert:
        that:
          - topolink_interfaces | length > 0
          - topolinks | length > 0
        fail_msg: >-
          Populate topolinks.yml with interface definitions and logical links before running the demo.

  tasks:
    - name: Retrieve EDA access token
      nokia.eda_utils_v1.get_token:
        base_url: "{{ eda_api_url }}"
        client_id: "{{ client_id }}"
        client_secret: "{{ client_secret if client_secret is not none else omit }}"
        username: "{{ eda_username }}"
        password: "{{ eda_password }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        keycloak_url: "{{ keycloak_url }}"
        keycloak_admin_realm: "{{ keycloak_admin_realm }}"
        keycloak_client_id: "{{ keycloak_client_id }}"
        keycloak_username: "{{ keycloak_username }}"
        keycloak_password: "{{ keycloak_password }}"
        keycloak_eda_realm: "{{ keycloak_eda_realm }}"
      register: token
      no_log: true

    - name: Build NodeProfile custom resources (CR only)
      nokia.eda_apps_core_v1.nodeprofile:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: cronly
        resource:
          metadata:
            namespace: "{{ eda_namespace }}"
            name: "{{ item.value.name }}"
            labels:
              demo.nokia.com/source: "uv-ansible-toponodes"
          spec: "{{ item.value.spec | combine({}) }}"
      loop: "{{ nodeprofiles | dict2items }}"
      loop_control:
        label: "{{ item.value.name }}"
      register: nodeprofile_crs

    - name: Discover existing NodeProfiles
      nokia.eda_apps_core_v1.nodeprofile:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: query
        namespace: "{{ eda_namespace }}"
        name: "{{ item.value.name }}"
      loop: "{{ nodeprofiles | dict2items }}"
      loop_control:
        label: "{{ item.value.name }}"
      register: existing_nodeprofiles
      failed_when: false

    - name: Fail if NodeProfile lookup returned unexpected errors
      ansible.builtin.fail:
        msg: >-
          Failed to query NodeProfile {{ item.item.value.name }}: {{ item.msg | default(item.body | default(item)) }}
      when:
        - item.failed | default(false)
        - (item.msg | default(item.body | default('')) | lower | regex_search('not found')) is none
      loop: "{{ existing_nodeprofiles.results }}"
      loop_control:
        label: "{{ item.item.value.name | default(item.item | default('unknown')) }}"

    - name: Build TopoNode custom resources (CR only)
      # Use state=cronly to collect CR payloads without altering the live API yet
      nokia.eda_apps_core_v1.toponode:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: cronly
        resource:
          metadata:
            namespace: "{{ eda_namespace }}"
            name: "{{ item.name }}"
            labels:
              eda.nokia.com/role: "{{ item.role }}"
              demo.nokia.com/source: "uv-ansible-toponodes"
          spec:
            nodeProfile: "{{ item.node_profile }}"
            operatingSystem: "{{ item.operating_system | default('srl') }}"
            platform: "{{ item.platform }}"
            version: "{{ item.version }}"
            productionAddress: >-
              {{ {'ipv4': item.production_ipv4} if item.production_ipv4 is defined else omit }}
      loop: "{{ toponodes }}"
      loop_control:
        label: "{{ item.name }}"
      register: topo_crs

    - name: Discover existing TopoNodes
      nokia.eda_apps_core_v1.toponode:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: query
        namespace: "{{ eda_namespace }}"
        name: "{{ item.name }}"
      loop: "{{ toponodes }}"
      loop_control:
        label: "{{ item.name }}"
      register: existing_toponodes
      failed_when: false

    - name: Fail if TopoNode lookup returned unexpected errors
      ansible.builtin.fail:
        msg: >-
          Failed to query TopoNode {{ item.item.name }}: {{ item.msg | default(item.body | default(item)) }}
      when:
        - item.failed | default(false)
        - (item.msg | default(item.body | default('')) | lower | regex_search('not found')) is none
      loop: "{{ existing_toponodes.results }}"
      loop_control:
        label: "{{ item.item.name | default(item.item | default('unknown')) }}"

    - name: Build Interface custom resources (CR only)
      nokia.eda_interfaces_v1alpha1.interface:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: cronly
        resource:
          metadata:
            namespace: "{{ eda_namespace }}"
            name: "{{ item.name }}"
            labels:
              demo.nokia.com/source: "uv-ansible-toponodes"
          spec:
            description: "{{ item.description | default(omit) }}"
            type: "{{ item.type | default('interface') }}"
            members: "{{ item.members }}"
      loop: "{{ topolink_interfaces }}"
      loop_control:
        label: "{{ item.name }}"
      register: interface_crs

    - name: Discover existing Interfaces
      nokia.eda_interfaces_v1alpha1.interface:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: query
        namespace: "{{ eda_namespace }}"
        name: "{{ item.name }}"
      loop: "{{ topolink_interfaces }}"
      loop_control:
        label: "{{ item.name }}"
      register: existing_interfaces
      failed_when: false

    - name: Fail if Interface lookup returned unexpected errors
      ansible.builtin.fail:
        msg: >-
          Failed to query Interface {{ item.item.name }}: {{ item.msg | default(item.body | default(item)) }}
      when:
        - item.failed | default(false)
        - (item.msg | default(item.body | default('')) | lower | regex_search('not found')) is none
      loop: "{{ existing_interfaces.results }}"
      loop_control:
        label: "{{ item.item.name | default(item.item | default('unknown')) }}"

    - name: Build TopoLink custom resources (CR only)
      nokia.eda_apps_core_v1.topolink:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: cronly
        resource:
          metadata:
            namespace: "{{ eda_namespace }}"
            name: "{{ item.name }}"
            labels:
              demo.nokia.com/source: "uv-ansible-toponodes"
          spec:
            links: "{{ item.links }}"
      loop: "{{ topolinks }}"
      loop_control:
        label: "{{ item.name }}"
      register: topolink_crs

    - name: Discover existing TopoLinks
      nokia.eda_apps_core_v1.topolink:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        state: query
        namespace: "{{ eda_namespace }}"
        name: "{{ item.name }}"
      loop: "{{ topolinks }}"
      loop_control:
        label: "{{ item.name }}"
      register: existing_topolinks
      failed_when: false

    - name: Fail if TopoLink lookup returned unexpected errors
      ansible.builtin.fail:
        msg: >-
          Failed to query TopoLink {{ item.item.name }}: {{ item.msg | default(item.body | default(item)) }}
      when:
        - item.failed | default(false)
        - (item.msg | default(item.body | default('')) | lower | regex_search('not found')) is none
      loop: "{{ existing_topolinks.results }}"
      loop_control:
        label: "{{ item.item.name | default(item.item | default('unknown')) }}"

    - name: Initialize transaction change set
      ansible.builtin.set_fact:
        transaction_crs: []

    - name: Assemble transaction change set for NodeProfiles
      ansible.builtin.set_fact:
        transaction_crs: "{{ (transaction_crs | default([])) + [ {'type': { operation: {'value': item.result}}} ] }}"
      vars:
        idx: "{{ loop.index0 }}"
        lookup_result: "{{ existing_nodeprofiles.results[idx] }}"
        operation: >-
          {{ 'create' if lookup_result.failed | default(false) else 'replace' }}
      loop: "{{ nodeprofile_crs.results }}"
      loop_control:
        label: "{{ item.item.value.name }}"

    - name: Extend transaction change set with TopoNodes
      ansible.builtin.set_fact:
        transaction_crs: "{{ (transaction_crs | default([])) + [ {'type': { operation: {'value': item.result}}} ] }}"
      vars:
        idx: "{{ loop.index0 }}"
        lookup_result: "{{ existing_toponodes.results[idx] }}"
        operation: >-
          {{ 'create' if lookup_result.failed | default(false) else 'replace' }}
      loop: "{{ topo_crs.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Extend transaction change set with Interfaces
      ansible.builtin.set_fact:
        transaction_crs: "{{ (transaction_crs | default([])) + [ {'type': { operation: {'value': item.result}}} ] }}"
      vars:
        idx: "{{ loop.index0 }}"
        lookup_result: "{{ existing_interfaces.results[idx] }}"
        operation: >-
          {{ 'create' if lookup_result.failed | default(false) else 'replace' }}
      loop: "{{ interface_crs.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Extend transaction change set with TopoLinks
      ansible.builtin.set_fact:
        transaction_crs: "{{ (transaction_crs | default([])) + [ {'type': { operation: {'value': item.result}}} ] }}"
      vars:
        idx: "{{ loop.index0 }}"
        lookup_result: "{{ existing_topolinks.results[idx] }}"
        operation: >-
          {{ 'create' if lookup_result.failed | default(false) else 'replace' }}
      loop: "{{ topolink_crs.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Submit transaction for NodeProfiles, TopoNodes, Interfaces, and TopoLinks
      nokia.eda_core_v1.transaction.v2.transaction:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        description: "{{ transaction_description }}"
        dryRun: false
        resultType: normal
        retain: true
        crs: "{{ transaction_crs }}"
      register: transaction

    - name: Display transaction identifier
      ansible.builtin.debug:
        msg: "Submitted transaction {{ transaction.result.id }} for {{ transaction_crs | length }} resources"

    - name: Wait for transaction execution result
      nokia.eda_core_v1.transaction.v2.result.execution:
        base_url: "{{ eda_api_url }}"
        auth_token: "Bearer {{ token.result.access_token }}"
        tls_skip_verify: "{{ tls_skip_verify | bool }}"
        transactionId: "{{ transaction.result.id }}"
        waitForComplete: true
        failOnErrors: true
      register: transaction_execution

    - name: Summarize transaction outcome
      ansible.builtin.debug:
        msg: "{{ transaction_execution.result.summary | default(transaction_execution.result, true) }}"
